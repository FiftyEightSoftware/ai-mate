name: Monthly Cost Report

on:
  schedule:
    # Run on the 1st of every month at 9 AM UTC
    - cron: '0 9 1 * *'
  workflow_dispatch:

jobs:
  cost-report:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      issues: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Cost Data
        id: costs
        run: |
          # Get costs for last month
          START_DATE=$(date -d "first day of last month" +%Y-%m-01)
          END_DATE=$(date -d "last day of last month" +%Y-%m-%d)
          
          COSTS=$(az consumption usage list \
            --start-date $START_DATE \
            --end-date $END_DATE \
            --query "[].{service:instanceName, cost:pretaxCost}" \
            --output json)
          
          echo "costs=$COSTS" >> $GITHUB_OUTPUT

      - name: Create Cost Report Issue
        uses: actions/github-script@v7
        with:
          script: |
            const costs = JSON.parse('${{ steps.costs.outputs.costs }}');
            const total = costs.reduce((sum, item) => sum + parseFloat(item.cost), 0);
            
            const body = `## ðŸ“Š Monthly Cost Report
            
            **Period:** Last Month
            **Total Cost:** $${total.toFixed(2)}
            
            ### Breakdown by Service
            
            ${costs.map(c => `- **${c.service}**: $${parseFloat(c.cost).toFixed(2)}`).join('\n')}
            
            ### Cost Trends
            - Compare with previous months
            - Check for unexpected spikes
            - Review auto-scaling policies
            
            ### Optimization Recommendations
            - Enable Redis caching if not already active
            - Review and adjust rate limits
            - Consider reserved instances for consistent workloads
            - Implement CDN for static assets
            
            ---
            *This report was automatically generated by GitHub Actions*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ’° Monthly Cost Report - ${new Date().toISOString().slice(0, 7)}`,
              body: body,
              labels: ['cost-monitoring', 'operations']
            });
